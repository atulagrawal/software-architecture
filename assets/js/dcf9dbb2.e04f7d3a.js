"use strict";(self.webpackChunksoftware_architecture=self.webpackChunksoftware_architecture||[]).push([[448],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},v=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=l(r),v=i,h=u["".concat(c,".").concat(v)]||u[v]||d[v]||s;return r?n.createElement(h,o(o({ref:t},p),{},{components:r})):n.createElement(h,o({ref:t},p))}));function h(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=r.length,o=new Array(s);o[0]=v;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[u]="string"==typeof e?e:i,o[1]=a;for(var l=2;l<s;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}v.displayName="MDXCreateElement"},8244:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var n=r(7462),i=(r(7294),r(3905));const s={},o="Tax Invoice Processing System",a={unversionedId:"system-design/tax-invoice-processing-app",id:"system-design/tax-invoice-processing-app",title:"Tax Invoice Processing System",description:"Design a system that businesses are able to use for checking tax invoices :",source:"@site/docs/system-design/tax-invoice-processing-app.md",sourceDirName:"system-design",slug:"/system-design/tax-invoice-processing-app",permalink:"/software-architecture/docs/system-design/tax-invoice-processing-app",draft:!1,editUrl:"https://github.com/atulagrawal/software-architecture/tree/main/packages/create-docusaurus/templates/shared/docs/system-design/tax-invoice-processing-app.md",tags:[],version:"current",frontMatter:{},sidebar:"systemDesignSidebar",previous:{title:"System Design Design - Webinars!",permalink:"/software-architecture/docs/system-design/system-design-webinars"}},c={},l=[{value:"Upload the invocies for the processing.",id:"upload-the-invocies-for-the-processing",level:3},{value:"Process the invocies and store thier results.",id:"process-the-invocies-and-store-thier-results",level:3}],p={toc:l},u="wrapper";function d(e){let{components:t,...r}=e;return(0,i.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tax-invoice-processing-system"},"Tax Invoice Processing System"),(0,i.kt)("p",null,"Design a system that businesses are able to use for checking tax invoices :"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Businesses upload the tax invoices for checking if they are any tax filing related issues (tax compliance check). The backend will have to parse the invoice pdf, run the checks (tax related rules) and then store the result.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The number of invoices could be upto 10,000"),(0,i.kt)("li",{parentName:"ul"},"The invoice could be ~5 MB size.")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"View the history of invoice statuses for upto a year.")),(0,i.kt)("h1",{id:"1-events-based-approach"},"1. Events based approach"),(0,i.kt)("p",null,"Upload invoices and then publish the event for processing the invoice - As there could be 10,000 files, it wouldn't be practical to do the processing in real time so its better to first upload the files to the file server and then do async processing. Customer can be notified via emails etc about the results."),(0,i.kt)("h3",{id:"upload-the-invocies-for-the-processing"},"Upload the invocies for the processing."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Customer uploads the invoices as pdfs."),(0,i.kt)("li",{parentName:"ol"},"The invoices pdfs are stored in file storage and invoice entries are created with pending status in the database."),(0,i.kt)("li",{parentName:"ol"},"Response is returned back to the customer.")),(0,i.kt)("mermaid",{value:"flowchart LR\n    browser[Browser] --\x3e webapp[Tax Invoice Web App]\n    webapp --\x3e invoiceserv[Tax Invoice Management Service]\n    invoiceserv --\x3e invoicedb[Database Storage]\n    invoiceserv --\x3e invoicedoc[Document Storage]\n    invoiceserv -- Publish Invoice Created Event --\x3e broker[Message Broker]\n    invoiceserv --\x3e webapp\n    webapp --\x3e browser"}),(0,i.kt)("h3",{id:"process-the-invocies-and-store-thier-results"},"Process the invocies and store thier results."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Invoice processing requires extraction of the raw data from the pdf."),(0,i.kt)("li",{parentName:"ol"},"The raw data is used for evaluating the rules."),(0,i.kt)("li",{parentName:"ol"},"Raw data along with status is stored in the database."),(0,i.kt)("li",{parentName:"ol"},"Customer is notified of the outcome.")),(0,i.kt)("mermaid",{value:"flowchart LR\n    broker -.-> subscriber[Subscriber]\n    subscriber --\x3e  invoiceserv[Tax Invoice Management Service]\n    invoiceserv--1. Load Invoice--\x3einvoiceserv\n    invoiceserv--2. Parse Invoice Data--\x3einvoiceserv\n    invoiceserv--3. Run Business Rules for computing the status --\x3e invoiceserv\n    invoiceserv--4. Store status --\x3e invoiceserv\n    invoiceserv-- 5. Notify customer --\x3e Notification[Notification Serv]"}),(0,i.kt)("h1",{id:"2-batch-based-approach"},"2. Batch based approach"),(0,i.kt)("p",null,"Upload files to common shared location and do batch processing - Its similar to above approach but here the files will be exchanged via central server."),(0,i.kt)("p",null,"The diagrams in this articles are created using ",(0,i.kt)("a",{parentName:"p",href:"https://mermaid.js.org/syntax/flowchart.html"},"mermaid")))}d.isMDXComponent=!0}}]);